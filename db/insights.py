"""
User Insights model
"""

from datetime import datetime
from sqlalchemy import (
    Column, BigInteger, String, Text, DateTime, Float, 
    JSON, ForeignKey, Index
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from .base import Base


class UserInsight(Base):
    """
    Stores derived insights about users
    Generated by analytics pipeline
    """
    __tablename__ = 'user_insights'
    
    # Primary key
    insight_id = Column(BigInteger, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False, index=True)
    
    # Insight metadata
    insight_type = Column(String(100), nullable=False, comment='Type of insight: activity_pattern, topic_interest, etc.')
    insight_date = Column(DateTime, nullable=False, default=func.now(), comment='When insight was generated')
    period_start = Column(DateTime, nullable=True, comment='Start of analysis period')
    period_end = Column(DateTime, nullable=True, comment='End of analysis period')
    
    # Insight data
    insight_data = Column(JSON, nullable=False, comment='Structured insight data')
    confidence_score = Column(Float, nullable=True, comment='Confidence in this insight (0-1)')
    
    # Common insight fields (denormalized for quick queries)
    top_topics = Column(JSON, nullable=True, comment='User top topics of interest')
    activity_pattern = Column(String(50), nullable=True, comment='User activity pattern: morning_person, night_owl, etc.')
    engagement_level = Column(String(50), nullable=True, comment='Engagement level: high, medium, low')
    influence_score = Column(Float, nullable=True, comment='User influence score')
    
    # LLM-generated insights
    llm_summary = Column(Text, nullable=True, comment='LLM-generated user summary')
    llm_personality = Column(JSON, nullable=True, comment='LLM-inferred personality traits')
    llm_interests = Column(JSON, nullable=True, comment='LLM-extracted interests')
    
    # Tracking
    created_at = Column(DateTime, nullable=False, default=func.now())
    updated_at = Column(DateTime, nullable=False, default=func.now(), onupdate=func.now())
    
    # Relationships
    user = relationship("TelegramUser", back_populates="user_insights")
    
    # Indexes
    __table_args__ = (
        Index('idx_insight_user_type', 'user_id', 'insight_type'),
        Index('idx_insight_date', 'insight_date'),
        Index('idx_insight_engagement', 'engagement_level'),
    )

    def __repr__(self):
        return f"<UserInsight(id={self.insight_id}, user={self.user_id}, type='{self.insight_type}')>"